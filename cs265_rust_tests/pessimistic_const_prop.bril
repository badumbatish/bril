# RUN: cat %s | bril2json | ../target/debug/cfg_construction 
# RUN: cat %s | bril2json | ../target/debug/pessimistic_const_prop | grep -v "mul sum3 sum3|add a b"
@simple_singly_block {
  a: int = const 4;
  b: int = const 2;

  # (a + b) * (a + b)
  sum1: int = add a b;
  sum2: int = add a b;
  prod1: int = mul sum1 sum2;

  # Clobber both sums.
  sum1: int = const 0;
  sum2: int = const 0;

  # Use the sums again.
  sum3: int = add a b;
  prod2: int = mul sum3 sum3;

  print prod2;
}
@if_else_block(a: int) {
  zero: int = const 0;
  is_term: bool = eq a zero;
  br is_term .cond.second .cond.first;
.cond.first:
  one: int = const 1;
  jmp .cond.finish;
.cond.second:
  one: int = const 2;
.cond.finish:
 a : int = add one zero;
}

@if_else_block_2{
  # int a = 30;
  a: int = const 30;

  # int b = 9 - (a / 5);
  five: int = const 5;
  div_result: int = div a five;
  nine: int = const 9;
  b: int = sub nine div_result;

  # int c = b * 4;
  four: int = const 4;
  c: int = mul b four;

  # if (c > 10) {
  ten: int = const 10;
  cond: bool = gt c ten;
  br cond .if_body .end_if;
.if_body:
  # c = c - 10;
  c: int = sub c ten;
.end_if:
  # return c * (60 / a);
  sixty: int = const 60;
  div_result2: int = div sixty a;
  result: int = mul c div_result2;
  ret result;
}
